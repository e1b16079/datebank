1.圧縮の結果
　　　　　　　          圧縮前(byte)　　　　　圧縮後(byte)　　　　　圧縮率    
fish.pgm		1392644         　    1968016             1.41
happyou.pgm             1484519       　      1786059             1.20
lunareclipse.pgm	619863                207764              0.33
paper.pgm		2729102               588777              0.21

2.考察
　上の表からわかるようにlunareclipse.pgmとpaper.pgmはしっかりと圧縮することができた。しかし,fish.pgmとhappyou.pgmは圧縮後のほうがデータのサイズが大きくなってしまった。なぜ圧縮後のほうが大きくなったのかプログラムを見直し調べることにした。
　今回作成したencode.cはRun Length法を用いて作成された。Run Length法は数値の列を数値とその数値が連続する個数の列に変換することでデータの圧縮を行う。しかしこの方法だと連続する個数が一個の場合,一つの数値を2つの数値で表すことになりデータが増えてしまう。結果連続する数値が一つである場合が多いほどサイズが大きく,連続する数値が多いほど効率の良い圧縮ができることがわかった。
・fish.pgmは影や距離感を表すために同じような色の連続が少ないため画像が圧縮されなかったと考える。
・happyou.pgmも同様に影などを表すために同じ色の連続が少ないため圧縮されなかったと考える。fish.pgmより圧縮率が良かったのはスクリーンの黒の部分が圧縮されたからだと考える。
・lunareclipse.pgmが圧縮されたのは背景の黒の部分が圧縮されたためだと考える。
・paper.pgmも同様に背景の白の部分が圧縮されたためだと考える。lunareclipse.pgmよりも圧縮率が良かったのは文字の部分でも圧縮できていたからだと考える。
　今回作ったプログラムでは現実の写真では影などを表現するために連続した数値にならず圧縮ができないとわかった。改善策としては連続する数値が一個の場合の１を表示させなければ画像の圧縮は可能となると考えられる。
